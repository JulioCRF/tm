package xxgam.oracle.apps.xbol.tm.RatesM.InsertRate.server;

import java.sql.SQLException;

import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.personalization.server.MainAMImpl;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
/*Added libraries*/
import oracle.apps.fnd.framework.server.OADBTransaction;


import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.Row;
import oracle.jbo.Transaction;

import oracle.jbo.server.DBTransaction;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InsertRateAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public InsertRateAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("xxgam.oracle.apps.xbol.tm.RatesM.InsertRate.server", /* package name */
      "InsertRateAMLocal" /* Configuration Name */);
    }


    /*Custom methods*/
    
     public void createRecord()
     {
       OAViewObject vo = (OAViewObject)getInsertRateVO1();
         OADBTransaction oADBTransaction = this.getOADBTransaction();

         oracle.jbo.domain.Number IdTarifaNum = oADBTransaction.getSequenceValue("XXGAM_TM_RATES_S");
         System.out.println("Id: "+IdTarifaNum);         
      
       if (!vo.isPreparedForExecution()) 
       { 
     vo.executeQuery(); 
       }
      
       Row row = vo.createRow();
       vo.insertRow(row);
         row.setAttribute("IdTarifa",IdTarifaNum);
         System.out.println("IdTarifa: "+row.getAttribute("IdTarifa"));
       row.setNewRowState(Row.STATUS_INITIALIZED);
     } 
     
    public void apply()
    {   
      getTransaction().commit();
    }
    
    public oracle.jbo.domain.Number sequenceapply() {
        
        OADBTransaction oADBTransaction = this.getOADBTransaction();
        
        oracle.jbo.domain.Number IdTarifa = oADBTransaction.getSequenceValue("XXGAM_TM_RATES_S");
        System.out.println("Id: "+ IdTarifa);
        return IdTarifa;
    
    }
    
    public int validateRecord(String Origin
                            , String Zones 
                            , String Destination
                            , String ProviderNumber
                            , String ProviderName
                            , String TransportMode
                            , String Currency
                            , oracle.jbo.domain.Number Rate
                            , oracle.jbo.domain.Number Maneuvers
                            , oracle.jbo.domain.Number Reparts
                            , String Cruce
                            , oracle.jbo.domain.Date DateFrom
                            , oracle.jbo.domain.Date DateTo
                            , String Distribution
                            , String Hyretype
                            , String Type
                            , String TypeV                             
                            ){
       
     OADBTransaction oadbTransaction = this.getOADBTransaction();

      int retval = 0; 
      OracleResultSet oracleResultSet = null;
      OraclePreparedStatement oraclePreparedStatement = null;
      
      String strOrigin;
      String strZones;
      String StrDestination;
      String StrProviderNumber;
      String StrProvider;
      String StrTransportMode;
      String StrCurrency;
      String StrRate;
      String StrManeuvers;  
      String StrReparts;
      String StrCruce;
      String StrDateFrom;
      String StrDateTo;
      String StrDistribution;
      String StrHyreType;
      String StrType;
      String StrTypeV;

     /*   try {
        
         SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
         Date  date = formatter.parse(DateFrom.toString());
          java.sql.Date sqlDate = new java.sql.Date(date.getTime());
          oracle.jbo.domain.Date jboDate = new oracle.jbo.domain.Date(sqlDate);
             System.out.println(jboDate);
           } catch (ParseException e) {
                   e.printStackTrace();
                   System.out.println(e.toString());
            }*/

 //   System.out.println("DateFrom.toString(): " + DateFrom.toString());
      
      if (Origin != null ){strOrigin = " AND ORIGIN = '" + Origin + "'";}
      else strOrigin = " AND ORIGIN IS NULL";
      
      if (Zones != null ){strZones = " AND R_ZONE = '" + Zones + "'";}
      else strZones = " AND R_ZONE IS NULL";
      
      if (Destination != null ){StrDestination = " AND DESTINATION = '" + Destination + "'"; }
      else StrDestination = " AND DESTINATION IS NULL";
        
      if (ProviderNumber != null ){StrProviderNumber = " AND Provider_Number = '" + ProviderNumber + "'";}
      else StrProviderNumber = " AND Provider_Number IS NULL";
        
      if (ProviderName != null ){StrProvider = " AND Provider_Name = '" + ProviderName + "'";}
      else StrProvider = " AND Provider_Name IS NULL";
        
      if (TransportMode != null ){StrTransportMode = " AND R_Mode = '" + TransportMode + "'";}
      else StrTransportMode = " AND R_Mode IS NULL";
      
      if (Currency != null ){StrCurrency = " AND Currency = '" + Currency + "'";}
      else StrCurrency = " AND Currency IS NULL";
      
      if (Rate != null ){StrRate = " AND Rate = '" + Rate + "'";}
      else StrRate = " AND Rate IS NULL";
      
      if (Maneuvers != null ){StrManeuvers = " AND Maneuvers = '" + Maneuvers + "'";}
      else StrManeuvers = " AND Maneuvers IS NULL";
      
      if (Reparts != null ){StrReparts = " AND Reparts = '" + Reparts + "'";}
      else StrReparts = " AND Reparts IS NULL";
      
      if (Cruce != null ){StrCruce = " AND Intersection = '" + Cruce + "'";}
      else StrCruce = " AND Intersection IS NULL";
         
      if (DateFrom != null ){StrDateFrom = " AND Date_From =  fnd_date.canonical_to_date('" + DateFrom + "')";}
      else StrDateFrom = " AND Date_From IS NULL";
      
      if (DateTo != null ){StrDateTo = " AND Date_To =  fnd_date.canonical_to_date('" + DateTo + "')";}
      else StrDateTo = " AND Date_To IS NULL";
      
      if (Distribution != null ){StrDistribution = " AND Distribution_Type = '" + Distribution + "'";}
      else StrDistribution = " AND Distribution_Type IS NULL";
          
      if (Hyretype != null ){StrHyreType = " AND Classification = '" + Hyretype + "'";}
      else StrHyreType = " AND Classification IS NULL";
      
      if (Type != null ){StrType = " AND Type_D = '" + Type + "'";}
      else StrType = " AND Type_D IS NULL";
      
      if (TypeV != null ){StrTypeV = " AND Type_V = '" + TypeV + "'";}
      else StrTypeV = " AND Type_V IS NULL";
     
      /*System.out.printKKln("Start XxgamChqPdfUtil.validateFileName()");*/
      StringBuffer stmt = new StringBuffer();
      stmt.append(" SELECT COUNT(ID_TARIFA)");
      stmt.append(" FROM XXGAM_TM_RATES");
      stmt.append(" WHERE 1 = 1");
      stmt.append(strOrigin);
        stmt.append(strZones);
        stmt.append(StrDestination);
        stmt.append(StrProviderNumber);
        stmt.append(StrProvider);
        stmt.append(StrTransportMode);
        stmt.append(StrCurrency);
        stmt.append(StrRate);
        stmt.append(StrManeuvers);
        stmt.append(StrReparts);
        stmt.append(StrCruce);
        stmt.append(StrDateFrom);
        stmt.append(StrDateTo);
        stmt.append(StrDistribution);
        stmt.append(StrHyreType);
        stmt.append(StrType);
        stmt.append(StrTypeV);
       stmt.append(" AND FLAG = 'Y'");

System.out.println("SELECT COUNT(ID_TARIFA) FROM XXGAM_TM_RATES WHERE 1 = 1"
                    +strOrigin
                    +strZones
                    +StrDestination
                    +StrProviderNumber
                    +StrProvider
                    +StrTransportMode
                    +StrCurrency
                    +StrRate
                    +StrManeuvers
                    +StrReparts
                    +StrCruce
                    +StrDateFrom
                    +StrDateTo
                    +StrDistribution
                    +StrHyreType
                    +StrType
                    +StrTypeV);

          try{
          oraclePreparedStatement = (OraclePreparedStatement)oadbTransaction.createPreparedStatement(stmt.toString(), DBTransaction.DEFAULT);
          

  //  oraclePreparedStatement.setString(1,Origin);         
   //       oraclePreparedStatement.setString(2,Destination); 

          oracleResultSet = (OracleResultSet)oraclePreparedStatement.executeQuery();
          System.out.println(stmt.toString());

          if(null != oracleResultSet && oracleResultSet.next()){
              retval = oracleResultSet.getInt(1);
          }
                  
      }catch(SQLException sqle){
          throw new OAException("chafeó por: " + sqle.getSQLState() + " Code: " + sqle.getErrorCode() + " Message: " + sqle.getMessage() ,  OAException.ERROR);
      }
      finally{
          try{
              if(null != oracleResultSet){
                  oracleResultSet.close();
              }
              if(null != oraclePreparedStatement){
                  oraclePreparedStatement.close();
              }
          }catch(SQLException sqle){
              throw new OAException("chafeo mas gacho: " + sqle.getSQLState() + " Code: " + sqle.getErrorCode() + " Message: " + sqle.getMessage() ,  OAException.ERROR);
          }
      }
        
      /*System.out.println("End XxgamChqPdfUtil.validateFileName() -> return value: " + retval);*/
      return retval;
    }
    
    
    public String RateTypeD (String RateNumber){
        String desc = "desc";
         System.out.println(RateNumber);
       if (RateNumber != null)   {
        if (RateNumber.equals("LOCAL")) {
            desc ="1";
            return desc;           
        }
         if (RateNumber.equals("FORANEO")){
            desc = "2";
            return desc;
        }
        if (RateNumber.equals("INTERNACIONAL")){
           desc = "3";
           return desc;
        }    
            return desc;
        }
        else     
      return "0";
        
    }
    
    
    public void rollback() {
      getTransaction().rollback(); 
    }


    /**Container's getter for InsertRateVO1
     */
    public OAViewObjectImpl getInsertRateVO1() {
        return (OAViewObjectImpl)findViewObject("InsertRateVO1");
    }
}
